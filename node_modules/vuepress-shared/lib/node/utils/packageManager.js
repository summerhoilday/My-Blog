"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectPackageManager = exports.getTypeofLockFile = exports.hasGlobalInstallation = void 0;
const execa_1 = require("execa");
const fs_1 = require("fs");
const path_1 = require("path");
const globalCache = new Map();
const localCache = new Map();
const isInstalled = (packageManager) => {
    try {
        return ((0, execa_1.sync)(`${packageManager} --version`, { stdio: "ignore" }).exitCode === 0);
    }
    catch (e) {
        return false;
    }
};
/**
 * Check if a global package manager is available
 */
const hasGlobalInstallation = (packageManager) => {
    const key = `global:${packageManager}`;
    const status = globalCache.get(key);
    if (status !== undefined)
        return status;
    if (isInstalled(packageManager)) {
        globalCache.set(key, true);
        return true;
    }
    return false;
};
exports.hasGlobalInstallation = hasGlobalInstallation;
const getTypeofLockFile = (cwd = process.cwd(), deep = true) => {
    const key = `local:${cwd}`;
    const status = localCache.get(key);
    if (status !== undefined)
        return status;
    if ((0, fs_1.existsSync)((0, path_1.resolve)(cwd, "pnpm-lock.yaml"))) {
        localCache.set(key, "pnpm");
        return "pnpm";
    }
    if ((0, fs_1.existsSync)((0, path_1.resolve)(cwd, "yarn.lock"))) {
        localCache.set(key, "yarn");
        return "yarn";
    }
    if ((0, fs_1.existsSync)((0, path_1.resolve)(cwd, "package-lock.json"))) {
        localCache.set(key, "npm");
        return "npm";
    }
    let dir = cwd;
    while (deep && dir !== (0, path_1.dirname)(dir)) {
        dir = (0, path_1.dirname)(dir);
        if ((0, fs_1.existsSync)((0, path_1.resolve)(dir, "pnpm-lock.yaml"))) {
            localCache.set(key, "pnpm");
            return "pnpm";
        }
        if ((0, fs_1.existsSync)((0, path_1.resolve)(dir, "yarn.lock"))) {
            localCache.set(key, "yarn");
            return "yarn";
        }
        if ((0, fs_1.existsSync)((0, path_1.resolve)(dir, "package-lock.json"))) {
            localCache.set(key, "npm");
            return "npm";
        }
    }
    return null;
};
exports.getTypeofLockFile = getTypeofLockFile;
const detectPackageManager = (cwd = process.cwd(), deep = true) => {
    const type = (0, exports.getTypeofLockFile)(cwd, deep);
    return (type ||
        ((0, exports.hasGlobalInstallation)("pnpm")
            ? "pnpm"
            : (0, exports.hasGlobalInstallation)("yarn")
                ? "yarn"
                : "npm"));
};
exports.detectPackageManager = detectPackageManager;
//# sourceMappingURL=packageManager.js.map