"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const ora_1 = tslib_1.__importDefault(require("ora"));
/**
 * Shell Logger
 */
class Logger {
    constructor(
    /**
     * Plugin name
     */
    name = "") {
        this.name = name;
        this.currentInstance = (0, ora_1.default)();
    }
    /**
     * Create a loading spinner with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    create(text) {
        this.currentInstance = (0, ora_1.default)({
            prefixText: chalk_1.default.blue(`${this.name}: `) || "",
            text,
        });
        return this.currentInstance;
    }
    /**
     * Update current loading spinner text
     *
     * @param text new hint text
     */
    update(text) {
        if (this.currentInstance)
            this.currentInstance.text = text;
        else
            this.create(text);
    }
    /**
     * Trigger current instance to loading state or create a new loading spinner with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    load(text = "") {
        return (!text && this.currentInstance ? this.currentInstance : this.create(text)).start();
    }
    /**
     * Trigger current instance to info state or create a new info icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    info(text = "") {
        return (!text && this.currentInstance ? this.currentInstance : this.create(text)).info();
    }
    /**
     * Trigger current instance to success state or create a new success icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    succeed(text = "") {
        return (!text && this.currentInstance ? this.currentInstance : this.create(text)).succeed();
    }
    /**
     * Trigger current instance to warn state or create a new warn icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    warn(text = "") {
        return (!text && this.currentInstance ? this.currentInstance : this.create(text)).warn();
    }
    /**
     * Trigger current instance to warn state or create a new warn icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    error(text = "") {
        return (!text && this.currentInstance ? this.currentInstance : this.create(text)).fail();
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map