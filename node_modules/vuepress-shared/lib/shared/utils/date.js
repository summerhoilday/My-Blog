"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compareDate = exports.getDate = exports.timeTransformer = void 0;
const dayjs_1 = require("./dayjs");
const getLang = (lang = "en") => {
    const langcode = lang.toLowerCase();
    if (langcode === "zh" || langcode === "zh-cn")
        return "zh";
    if (langcode === "en-us" || langcode === "en-uk" || langcode === "en")
        return "en";
    console.warn(`${lang} locale missing in config`);
    return "en";
};
const timeTransformer = (date, options = {}) => {
    const { lang, timezone, type } = options;
    dayjs_1.dayjs.locale(getLang(lang));
    const dateText = timezone
        ? (0, dayjs_1.dayjs)(date).tz(timezone).format("LL")
        : (0, dayjs_1.dayjs)(date).format("LL");
    const timeText = timezone
        ? (0, dayjs_1.dayjs)(date).tz(timezone).format("HH:mm")
        : (0, dayjs_1.dayjs)(date).format("HH:mm");
    return type === "date"
        ? dateText
        : type === "time"
            ? timeText
            : `${dateText} ${timeText}`;
};
exports.timeTransformer = timeTransformer;
const getDate = (date, options = {}) => {
    const { timezone } = options;
    if (date) {
        const time = (0, dayjs_1.dayjs)(date instanceof Date ? date : date.trim());
        if (time.isValid()) {
            const currentTime = timezone ? (0, dayjs_1.dayjs)(date).tz(timezone) : (0, dayjs_1.dayjs)(date);
            const year = currentTime.year();
            const month = currentTime.month() + 1;
            const day = currentTime.date();
            const hour = currentTime.hour();
            const minute = currentTime.minute();
            const second = currentTime.second();
            const millisecond = currentTime.millisecond();
            const isDate = hour === 0 && minute === 0 && second === 0 && millisecond === 0;
            const value = currentTime.toDate();
            return {
                display: (0, exports.timeTransformer)(value, {
                    type: isDate ? "date" : "full",
                    ...options,
                }),
                value,
                detail: {
                    year,
                    month,
                    day,
                    ...(isDate ? {} : { hour, minute, second }),
                },
            };
        }
        const timeRegPattern = /(?:(\d{2,4})[/-](\d{1,2})[/-](\d{1,2}))?\s*(?:(\d{1,2}):(\d{1,2})(?::(\d{1,2}))?)?/u;
        const result = timeRegPattern.exec(date.trim());
        if (result) {
            const [, year, month, day, hour, minute, second] = result;
            const getNumber = (a) => typeof a === "undefined" ? undefined : Number(a);
            const getYear = (yearNumber) => yearNumber && yearNumber < 100 ? yearNumber + 2000 : yearNumber;
            const getSecond = (secondNumber) => (hour && minute && !second ? 0 : secondNumber);
            const detail = {
                year: getYear(getNumber(year)),
                month: getNumber(month),
                day: getNumber(day),
                hour: getNumber(hour),
                minute: getNumber(minute),
                second: getSecond(getNumber(second)),
            };
            const isTime = year === undefined && month === undefined && day === undefined;
            const isDate = hour === undefined && minute === undefined && second === undefined;
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            const value = (0, dayjs_1.dayjs)({ ...detail, month: detail.month - 1 }).toDate();
            return {
                display: (0, exports.timeTransformer)(value, {
                    type: isDate ? "date" : isTime ? "time" : "full",
                    ...options,
                }),
                value: isTime ? undefined : value,
                detail: isDate
                    ? { year: detail.year, month: detail.month, day: detail.day }
                    : isTime
                        ? { hour: detail.hour, minute: detail.minute, second: detail.second }
                        : detail,
            };
        }
    }
    return null;
};
exports.getDate = getDate;
const compareDate = (dateA, dateB) => {
    const parsedDateA = (0, exports.getDate)(typeof dateA === "number" ? new Date(dateA) : dateA);
    const parsedDateB = (0, exports.getDate)(typeof dateB === "number" ? new Date(dateB) : dateB);
    if (!parsedDateA || !parsedDateA.value)
        return 1;
    if (!parsedDateB || !parsedDateB.value)
        return -1;
    return parsedDateB.value.getTime() - parsedDateA.value.getTime();
};
exports.compareDate = compareDate;
//# sourceMappingURL=date.js.map